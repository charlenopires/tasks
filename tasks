#!/usr/bin/env escript
%% -*- erlang -*-

-mode(compile).
-compile([nowarn_unused_vars, nowarn_unused_function, debug_info, verbose]).

-define(ESC, <<"\e[">>).
-define(RST, <<"0">>).
-define(END, <<"m">>).

%% Defining colors
-define(YELLOW, <<"33">>).
-define(CYAN, <<"36">>).
-define(RED, <<"31">>).
-define(BLUE, <<"34">>).
-define(MAGENTA, <<"35">>).
-define(GREEN, <<"32">>).

%% Internal
color(Color) -> <<?ESC/binary, Color/binary, ?END/binary>>.
reset() -> <<?ESC/binary, ?RST/binary, ?END/binary>>.

%% Colors
yellow(Text) -> [color(?YELLOW), Text, reset()].
cyan(Text) -> [color(?CYAN), Text, reset()].
red(Text) -> [color(?RED), Text, reset()].
blue(Text) -> [color(?BLUE), Text, reset()].
magenta(Text) -> [color(?MAGENTA), Text, reset()].
green(Text) -> [color(?GREEN), Text, reset()].

info() ->
  io:format("~s~n", [yellow("What the task?")]),
  io:format("- ~s | ~s~n", [green("update <directory>"), cyan("Updating git repository of a specifical directory")]),
  io:format("- ~s | ~s~n", [green("updateall"), cyan("Updating git repository of all directories in path")]),
  io:format("- ~s | ~s~n", [green("clean <directory>"), cyan("Cleaning git repository of a specifical directory")]),
  io:format("- ~s | ~s~n", [green("cleanall"), cyan("Cleaning git repository of all directories in path")]).

main(Args) ->
  % debugger:start(),
  case(Args) of
    ["update", _] -> update(Args);
    % ["updateall"] -> update_all(Args);
    Else -> info()
  end,
  erlang:halt(0).

path(Args) ->
  [_,Dir] = Args,
  {ok, Pwd} = file:get_cwd(),
  Path = filename:join(Pwd,Dir).

% Update repository to all directories into
update(Args) ->
  Dirs = listing_dirs(path(Args)),
  update_git(path(Args), Dirs).

update_all(Args) ->
  io:fwrite("Update all!").

update_git(_, []) -> [];
update_git(Path, [Head|Tail]) ->
  io:format("Executando: ~s~n", [Head]),
  os:cmd("cd " ++ Path ++ "/" ++ Head ++ " && git pull && cd .."),
  % io:format("PATH: ~p~n | HEAD: ~s~n | TAIL: ~p~n",[Path, Head, Tail]),
  io:fwrite("~n~n"),
  io:fwrite("--------------------------------------------------------------------"),
  update_git(Path, Tail).

% Listing directories in this Directory
listing_dirs(ListDirs) ->
  {ok, List} = file:list_dir_all(ListDirs),
  Dirs = lists:filter(fun(A)-> filelib:is_dir(filename:join(ListDirs,A)) end, List).

%TODO: How to get import functions from module external into escript
%TODO: See utf-8 in Erlang, how to work?
